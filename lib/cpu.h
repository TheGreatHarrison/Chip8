#pragma once

#include "opcode.h"
#include <SDL2/SDL.h>


#define MEMORY_SIZE 4096
#define PC_START 0x200

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define ON_COLOR 0xFFFFFFFF
#define OFF_COLOR 0xFF000000

static const uint8_t font[80] = {
  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

struct cpu
{
    uint8_t memory[MEMORY_SIZE];
    uint16_t pc;
    uint16_t i;
    uint16_t stack[16];
    uint8_t stackPointer;
    uint8_t v[16];

    uint8_t delayTimer;
    uint8_t soundTimer;

    uint8_t updateDisplay;

    uint16_t instruction;
    union opcode opcode;

    uint32_t pixels[SCREEN_WIDTH * SCREEN_HEIGHT];

};

// cpu things
int cpuInit(struct cpu* cpu, char* filename);
void cpuFetch(struct cpu* cpu);
void cpuExecute(struct cpu* cpu);
void cpuUpdateTimers(struct cpu* cpu);
void cpuCycle(struct cpu* cpu);

